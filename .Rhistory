# second letter that is an "e".
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
print(x)
print(sample(3,33))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- student[2]
# Create an if statement to find the names of students where the
# second letter that is an "e".
print(temp)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- student[1]
# Create an if statement to find the names of students where the
# second letter that is an "e".
print(temp)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
print(temp)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,3)
# Create an if statement to find the names of students where the
# second letter that is an "e".
print(temp)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
print(temp)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == e){
print(student)
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
print("Students with second letter is e")
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
print("Students with second letter is e")
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
install.packages("devtools")
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
combo <- sample(33,3)
print(f('Student: {x} || Combo: {combo}'))
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
combo <- sample(33,3)
print(f('Student: {x} || Combo: {combo}'))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
combo <- sample(33,3)
print(f("Student: {x}"))
}
}
devtools::install_github("jimhester/fstrings")
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
combo <- sample(33,3)
print(f('student {x},',
' Combo {combo}'))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
}
# Call the function with the student vector as an argument.
for (x in students) {
roll_call()
print(x)
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (X in class){
combo <- sample(33,3)
f('student {x},',
' Combo {combo}')
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
temp <- substring(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (temp == 'e'){
print(student)
}
}
name <- "Fred"
age <- 50
anniversary <- as.Date("1991-10-12")
f('My name is {name},',
' my age next year is {age + 1},',
' my anniversary is {format(anniversary, "%A, %B %d, %Y")}.')
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign names to a vector
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Use double brackets to access only the value
precipitation_summary[["Max."]]
# Standard deviation
# Display the standard deviation
sd(precipitation)
# Round SD to two digits
stdev <- sd(precipitation)
round(stdev, 2)
# Standard deviation and round using the pipe operator
precipitation %>% sd()
3.141592653 %>% round(2)
# A few more methods
# Determine the length of a vector
length(precipitation)
# Display the sum of a vector
yearly_precipitation <- sum(precipitation)
yearly_precipitation
# The same operations, this time using pipes
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
s
---
title: "Navigation"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### Dependency
```{r}
library(tidyverse)
```
###
```{r}
sample_csv <- read_csv("data.csv")
```
###
```{r}
head(sample_csv)
```
clear
clear
x <- 5
x <- 5
> numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
> numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
> numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
#Deliverable 1-----------------------------------------------------------
#load dplyr package
library(dplyr)
#read file
MechaCar <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar)
#perform summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
setwd("C:/Users/Alec/Downloads/BootCamp/Module 15/15_MechaCar_Statistical_Analysis")
#Deliverable 1-----------------------------------------------------------
#load dplyr package
library(dplyr)
#read file
MechaCar <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar)
#perform summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
View(MechaCar)
#read file
Suspension <- read.csv(file='Resources/Suspension_coil.csv',check.names=F,stringsAsFactors = F)
#get a total summary
summarize_demo <- Suspension %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create a lot summary
summarize_demo
lot_demo <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary
#Deliverable 1-----------------------------------------------------------
#load dplyr package
library(dplyr)
#read file
MechaCar <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar)
#perform summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
#Deliverable 2------------------------------------------------------------
#read file
Suspension <- read.csv(file='Resources/Suspension_coil.csv',check.names=F,stringsAsFactors = F)
#get a total summary
summarize_demo <- Suspension %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create a lot summary
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary
View(lot_summary)
View(MechaCar)
View(summarize_demo)
View(Suspension)
View(summarize_demo)
#Deliverable 1-----------------------------------------------------------
#load dplyr package
library(dplyr)
#read file
MechaCar <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar)
#perform summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
#Deliverable 2------------------------------------------------------------
#read file
Suspension <- read.csv(file='Resources/Suspension_coil.csv',check.names=F,stringsAsFactors = F)
#get a total summary
total_summary <- Suspension %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create a lot summary
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary
#Deliverable 1-----------------------------------------------------------
#load dplyr package
library(dplyr)
#read file
MechaCar <- read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar)
#perform summary
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data= MechaCar))
#Deliverable 2------------------------------------------------------------
#read file
Suspension <- read.csv(file='Resources/Suspension_coil.csv',check.names=F,stringsAsFactors = F)
#get a total summary
total_summary <- Suspension %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create a lot summary
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
lot_summary
View(lot_summary)
View(Suspension)
LE 2
#2. Import and read in the Suspension_Coil.csv file as a table
mecha_coil <- read.csv(file='./Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#3. Create a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
#4. Create a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot.
lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
#box plot: PSI Whole lot
plt1 <- ggplot(mecha_coil,aes(y=PSI)) #import dataset into ggplot2
plt1 + geom_boxplot() #add boxplot
#box plot: PSI each indicdiual Lot
plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt2 + geom_boxplot()
#2. Import and read in the Suspension_Coil.csv file as a table
mecha_coil <- read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
mecha_coil <- read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#3. Create a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
#4. Create a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot.
lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
#box plot: PSI Whole lot
plt1 <- ggplot(mecha_coil,aes(y=PSI)) #import dataset into ggplot2
plt1 + geom_boxplot() #add boxplot
#box plot: PSI each indicdiual Lot
plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
plt2 + geom_boxplot()
View(total_summary)
View(lot_summary)
View(total_summary)
View(lot_summary)
#1. use t.test() to determine if the PSI across ALL lots is statistically different from the pop. mean of 1,500 PSI.
t.test(mecha_coil$PSI,mu=1500)
#2. Use t.test() function 3 more times with subset() to determine if PSI for each manufacturing lot is statistically different from the pop. mean of 1,500 PSI
lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI,mu=1500)
View(lot1)
View(lot2)
View(lot3)
#1. use t.test() to determine if the PSI across ALL lots is statistically different from the pop. mean of 1,500 PSI.
t.test(mecha_coil$PSI,mu=1500)
#2. Use t.test() function 3 more times with subset() to determine if PSI for each manufacturing lot is statistically different from the pop. mean of 1,500 PSI
lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI,mu=1500)
t.test(lot3$PSI,mu=1500)
# log10 was not used as the data was not skewed and did not need any smoothing
